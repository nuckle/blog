---
import { Icon } from 'astro-icon/components';

interface Props {
	class?: string;
}

const { class: className } = Astro.props;
---

<button class:list={[className]} id='themeToggle' title='Theme Toggle'>
	<Icon name='sun' class='sun' height='1.4rem' width='1.4rem' />
	<Icon name='moon' class='moon' height='1.4rem' width='1.4rem' />
</button>

<script is:inline>
	const theme = (() => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme') ?? 'light';
		}
		if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
			return 'dark';
		}
		return 'light';
	})();

	if (theme === 'light') {
		document.documentElement.classList.remove('dark');
	} else {
		document.documentElement.classList.add('dark');
	}

	window.localStorage.setItem('theme', theme);

	const themeToggleEvent = new Event('themeToggle');

	const handleToggleClick = (e) => {

		const targetEl = e.currentTarget;

		const update = () => {
			const element = document.documentElement;
			element.classList.toggle('dark');

			const isDark = element.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');

			targetEl.dispatchEvent(themeToggleEvent);
		};

		if (!document.startViewTransition) return update();

		const x = e?.clientX ?? innerWidth / 2,
			y = e?.clientY ?? innerHeight / 2,
			a = Math.hypot(Math.max(x, innerWidth - x), Math.max(y, innerHeight - y));

		document
			.startViewTransition(async () => {
				update();
			})
			.ready.then(() => {
				document.documentElement.animate(
					{
						clipPath: [
							`circle(0 at ${x}px ${y}px)`,
							`circle(${a}px at ${x}px ${y}px)`,
						],
					},
					{
						duration: 450,
						easing: 'ease-in',
						pseudoElement: '::view-transition-new(root)',
					},
				);
			});
	};

	document
		.getElementById('themeToggle')
		?.addEventListener('click', handleToggleClick);
</script>
