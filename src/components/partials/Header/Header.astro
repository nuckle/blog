---
import ThemeSwitch from '@components/partials/ThemeSwitch.astro';
import NavLink from '@components/partials/Header/NavLink.astro';
import Search from 'astro-pagefind/components/Search';
import { Icon } from 'astro-icon/components';

const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1);

interface Props {
	class?: string;
}

const { class: className } = Astro.props;
---

<header class:list={['container mx-auto', className]}>
	<nav
		class='flex align-center justify-between flex-wrap py-3 md:py-4 md:py-6'
	>
		<button
			id='toggle-menu-btn'
			type='button'
			class='inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700'
			aria-controls='menu'
			aria-expanded='false'
		>
			<span class='sr-only'>Open main menu</span>
			<Icon name='burger' class='w-5 h-5' />
		</button>

		<div
			id='menu'
			class='hidden w-full md:flex md:w-auto order-last md:order-none shadow-lg md:shadow-none p-3 md:p-0 rounded-xl md:rounded-none items-center'
		>
			<ul
				class='flex flex-col md:flex-row align-center gap-x-1 gap-y-2 md:gap-y-0'
			>
				<li>
					<NavLink linkText={'Home'} linkPath={'/'} currentPath={currentPath} />
				</li>
				<li>
					<NavLink
						linkText={'About'}
						linkPath={'/about'}
						currentPath={currentPath}
					/>
				</li>
				<li>
					<NavLink
						linkText={'Projects'}
						linkPath={'/projects'}
						currentPath={currentPath}
					/>
				</li>
				<li>
					<NavLink linkText={'Blog'} linkPath={'/blog'} currentPath={currentPath} />
				</li>
			</ul>
		</div>

		<div class='flex align-center gap-x-1'>
			<button
				id='searchBtn'
				title='Search Posts'
				class='p-2 dark:hover:bg-slategray hover:bg-silver transition-colors rounded-md'
			>
				<Icon name='search' height='1.3rem' width='1.3rem' />
			</button>
			<ThemeSwitch
				class='px-2 dark:hover:bg-slategray hover:bg-silver transition-colors rounded-md'
			/>
		</div>

		<div
			id='modal'
			tabindex='-1'
			aria-hidden='true'
			class='fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full backdrop-blur-sm'
		>
			<div class='relative w-full max-w-2xl h-fit mb-auto'>
				<!-- Modal content -->
				<div class='relative bg-white rounded-lg shadow dark:bg-darkblack'>
					<Search
						id='search'
						className='pagefind-ui'
						uiOptions={{
							showImages: false,
							resetStyles: true,
							translations: {
								clear_search: '',
							},
						}}
					/>
					<div id='results'></div>
					<script src='/pagefind/pagefind-ui.js' is:inline></script>
				</div>
			</div>
		</div>

		<script>
			import { Modal } from 'flowbite';
			import { Collapse } from 'flowbite';

			const $buttonElement: HTMLElement | null =
				document.querySelector('#searchBtn');
			const $modalElement: HTMLElement | null = document.querySelector('#modal');

			const modal = new Modal($modalElement);

			if ($buttonElement) {
				$buttonElement.addEventListener('click', () => {
					modal.toggle();
				});
			}

			const toggleBtn: HTMLInputElement | null =
				document.querySelector('#toggle-menu-btn');
			const menu: HTMLElement | null = document.querySelector('#menu');
			const toc: HTMLElement | null =
				document.querySelector('#table-of-contents');
			const tocList: HTMLElement | null = document.querySelector('#toc-list');
			let newTocMarginTopValue: string;
			let newTocListMaxHeightValue: string;

			const options = {
				onCollapse: () => {
					if (toc) resetTocStyles();
				},
				onExpand: () => {
					if (menu && toc && tocList) {
						const menuHeight = menu.offsetHeight;
						const tocStyles = getComputedStyle(toc);
						const tocMarginTop = tocStyles.marginTop;
						const tocMarginTopValue = parseInt(tocMarginTop, 10);
						newTocMarginTopValue = `${tocMarginTopValue + menuHeight}px`;

						const tocListStyles = getComputedStyle(tocList);
						const tocListMaxHeight = tocListStyles.maxHeight;
						const tocListMaxHeightValue = parseInt(tocListMaxHeight, 10);
						newTocListMaxHeightValue = `${tocListMaxHeightValue - menuHeight}px`;

						toc.style.marginTop = newTocMarginTopValue;
						tocList.style.maxHeight = newTocListMaxHeightValue;
					}
				},
			};

			const instanceOptions = {
				id: 'menu',
				override: true,
			};

			const collapse = new Collapse(menu, toggleBtn, options, instanceOptions);

			function resetTocStyles() {
				if (toc) {
					toc.style.marginTop = '';
				}

				if (tocList) {
					tocList.style.maxHeight = '';
				}
			}

			function applyTocStyles() {
				if (toc) {
					toc.style.marginTop = newTocMarginTopValue;
				}

				if (tocList) {
					tocList.style.maxHeight = newTocListMaxHeightValue;
				}
			}

			const mediaQuery = window.matchMedia('(min-width: 48rem)');
			function handleScreenChange(e: MediaQueryListEvent | MediaQueryList) {
				if (e.matches) {
					resetTocStyles();
				} else if (toggleBtn?.getAttribute('aria-expanded') === 'true') {
					applyTocStyles();
				}
			}

			mediaQuery.addListener(handleScreenChange);
			handleScreenChange(mediaQuery);
		</script>
	</nav>
</header>
